export default `Currently, frameworks for decentralized applications (dApps) provide very limited options in regards to utility. According to Ethereum, there are only three types of applications: financial, semi-financial, and decentralized governance applications. Although these examples are revolutionary compared to traditional programs, it becomes obvious that decentralized applications are not utilizing their full potential. Much like traditional, centralized products, dApps should be able to serve a wider range of programs such as multiplayer video games, social media platforms, web browsers, educational software, and so much more. However, because blockchain applications require that nodes must store a global state, it becomes impossible for the entire network or a subset of nodes to act like a truly decentralized backend. As such, we propose a framework for application specific subnetworks called parties in which nodes can opt in to contribute computing power and storage for any given application without undermining the network’s security.\n\nSimilar to how neighborhoods have their own specific rules or local ordinances that only apply to their residences, parties have their own set of rules pertaining to its fees, security, and tokenomics. Lynx’s consensus mechanism provides a general protocol for processing information which parties will use as a basis. On top of that, a party can create additional rules which best suits its application. For example, a party which hosts multiplayer video games may require that all nodes don’t collect a transaction fee when processing a user’s network request. Given the high frequency nature of online video games, it would not be realistic to incur a cost to a player for every time they interact with the network. Additionally, parties are able to create their own network tokens, essentially subnetwork-specific cryptocurrencies used to facilitate transactions. Each subnetwork’s economy can be made with custom rules relating to tokenomics and issuance that best suit its applications’ needs. It should also be noted that since parties inherit the qualities of its parent network, LX transactions can also be processed by communicating with the entire Lynx Network in addition to the subnetwork. Lastly, due to some applications needing more security than others, a party may require that a certain threshold of consensus be achieved before assuming finality. Applications relating to finance, governance, or any platform responsible for transferring sensitive information may consider this necessary in order for the application to operate as planned.\n\nMuch like existing decentralized applications, parties are dependent on smart contracts to handle server-side operations. However, unlike existing frameworks, it is not required that all nodes store smart contracts as a part of their global state. Thanks to distributed state chains, nodes can optionally decide to maintain the state of a contract account if they deem it financially viable for them. But how can a node consider whether storing a contract is worth it to them on a subnetwork where fees are nonexistent? Compensation for nodes lending their computing power and storage does not have to be direct. For instance, nodes can receive indirect compensation by issuing themselves network tokens proportional to the amount of computational work they have carried out. In freemium subnetworks, in-app purchases and fees not relating to the primary service provided by the application, can be pooled to support participating nodes. The network tokens generated can then be swapped with LX or other digital assets existing in the pool to ultimately receive proportional compensation.
`